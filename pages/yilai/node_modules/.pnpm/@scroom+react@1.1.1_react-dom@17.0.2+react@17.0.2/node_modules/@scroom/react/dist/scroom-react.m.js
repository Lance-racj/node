import { useState, useEffect } from 'react';
import { createScroom, debug } from 'scroom';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function useScroom(ref, options) {
  if (options === void 0) {
    options = {};
  }

  var _useState = useState(null),
      sc = _useState[0],
      setSc = _useState[1];

  useEffect(function () {
    var target = ref.current;

    if (target) {
      var newSc = createScroom(_extends({
        target: target
      }, options));
      setSc(newSc);
      var _options = options,
          onEnter = _options.onEnter,
          onLeave = _options.onLeave,
          onProgress = _options.onProgress,
          onDebug = _options.onDebug;

      if (onEnter) {
        newSc.on("enter", onEnter);
      }

      if (onLeave) {
        newSc.on("leave", onLeave);
      }

      if (onProgress) {
        newSc.on("progress", onProgress);
      }

      if (onDebug) {
        newSc.on("debug", onDebug);
      }

      return function () {
        newSc.destroy();
      };
    }
  }, [ref, options.direction, options.offset, options.threshold]);
  return sc;
}

function useDebug(sc, id) {
  useEffect(function () {
    if (sc) {
      var controller = debug(sc, id);
      return function () {
        controller.destroy();
      };
    }
  }, [sc, id]);
}

export { useDebug, useScroom };
//# sourceMappingURL=scroom-react.m.js.map
