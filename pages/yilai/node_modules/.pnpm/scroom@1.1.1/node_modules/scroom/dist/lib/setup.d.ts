import Emittery from 'emittery';
/** options for creating a scroom instance */
export interface CreateScroomOptions<T extends Element> {
    /** target element */
    target: T;
    /** trigger distance from the top/left of the viewport. unit: %. range: 0 - 1. default: 0.5 */
    offset?: number;
    /** scrolling detection frequency threshold. unit: px. default: 4 */
    threshold?: number;
    /** scrolling detection direction. default: vertical */
    direction?: 'vertical' | 'horizontal';
}
/** scroom instance events */
export interface ScroomEventMap<T> {
    enter: {
        target: T;
    };
    leave: {
        target: T;
    };
    progress: {
        target: T;
        progress: number;
    };
    debug: {
        target: T;
        intersection: IntersectionObserverEntry;
        offset: number;
        progress: number;
        direction: 'vertical' | 'horizontal';
        action: 'enter' | 'progress' | 'leave' | null;
    };
}
/** scroom instance */
export interface ScroomInstance<T extends Element> {
    target: T;
    /** intersection observer inside this instance */
    observer: IntersectionObserver;
    /** add event listener */
    on: Emittery<ScroomEventMap<T>>['on'];
    /** add event listener for once */
    once: Emittery<ScroomEventMap<T>>['once'];
    /** remove event listener */
    off: Emittery<ScroomEventMap<T>>['off'];
    /** destroy instance and remove all event listeners */
    destroy: () => void;
}
/**
 * create a scroom instance
 * @param options - create options
 * @returns scroom instance
 */
export declare function createScroom<T extends Element>(options: CreateScroomOptions<T>): ScroomInstance<T>;
