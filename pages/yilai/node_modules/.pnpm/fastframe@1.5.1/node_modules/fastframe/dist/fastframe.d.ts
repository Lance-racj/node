import { Emitter } from 'mitt';
import { Properties } from 'csstype';

/**
 * @public
 *
 * 创建 drawer 实例, drawer 实例可将帧绘制在 canvas 上
 * @param canvas - canvas element
 * @param parallel - 是否启用多线程加速
 * @returns drawer 实例
 */
export declare function createDrawer(canvas: HTMLCanvasElement, parallel: boolean, alpha: boolean): Drawer;

/**
 * @public
 *
 * 创建 Player
 * @param options - 配置项
 * @returns Player 实例
 */
export declare function createPlayer(options: CreatePlayerOptions): Player;

/**
 * @public
 *
 * 创建 Player 的配置项
 */
export declare type CreatePlayerOptions = {
    /** 容器元素 */
    container: HTMLElement;
    /** canvas 高度 */
    height: number;
    /** canvas 宽度 */
    width: number;
    /** canvas 布局方式 */
    layout: "intrinsic" | "responsive" | "fixed" | "fill";
    /** 为 canvas 元素设置 object-fit, 默认值: cover */
    objectFit?: Properties["objectFit"];
    /** 为 canvas 元素设置 object-position, 默认值: center */
    objectPosition?: Properties["objectPosition"];
    /** 图片帧地址  */
    frames: string[] | {
        total: number;
        iterator: (i: number) => string;
    };
    /** 是否使用多线程优化, 默认为自动检测. */
    parallel?: boolean;
    /** 是否开启透明度 */
    alpha?: boolean;
    /** 加载时一个区块的大小, 默认值: `10` */
    chunkSize?: number;
    /** 播放帧率, 默认值: `30` */
    fps?: number;
    /** 是否自动加载, 默认值: `true`  */
    autoload?: boolean;
    /** 是否启用懒加载, 仅当 `autoload` 为 true 时有效, 默认值: `true` */
    lazyload?: boolean;
    /** 是否自动播放, 仅当 `autoload` 为 true 时有效, 默认值: `false` */
    autoplay?: boolean;
    /** 是否循环播放, 默认值: `false` */
    loop?: boolean;
    /** 播放完成时是否自动倒放, 仅当 `loop` 为 true 时有效, 默认值: `false` */
    yoyo?: boolean;
};

/**
 * @public
 *
 * drawer 实例
 */
export declare type Drawer = {
    /**
     * 预加载某一帧，仅影响网络请求
     * @param src - 图片地址
     */
    preload: (src: string) => Promise<void>;
    /**
     * 绘制某一帧
     * @param src - 图片地址
     */
    draw: (src: string) => Promise<void>;
    /** 销毁 drawer, 释放内存 */
    destroy: () => Promise<void>;
};

/**
 * @public
 *
 * Player 实例
 */
export declare type Player = {
    /** 当前播放的帧 */
    readonly curFrame: number;
    /** 是否处于倒放状态 */
    readonly isReversed: boolean;
    /** 是否处于播放状态 */
    readonly isPlaying: boolean;
    /**
     * 加载全部帧图片, 仅执行网络请求
     * 使用抽帧加载的方法，即优先加载间隔的关键帧
     * `[-,-,-,-,-] -> [+,-,+,-,+] -> [+,+,+,+,+]`
     */
    load: () => Promise<void>;
    /**
     * 切换至某一帧
     * @param index - frame index
     */
    pin: (index: number) => Promise<void>;
    /**
     * 开始播放
     */
    play: () => void;
    /**
     * 暂停播放
     */
    pause: () => void;
    /**
     * 修改播放顺序
     */
    reverse: () => void;
    /**
     * 监听事件 player 事件
     * @see https://github.com/developit/mitt#on
     */
    on: Emitter<PlayerEventMap>["on"];
    /**
     * 移除 player 事件监听
     * @see https://github.com/developit/mitt#off
     */
    off: Emitter<PlayerEventMap>["off"];
    /** 销毁播放器, 释放内存 */
    destroy: () => Promise<void>;
};

/**
 * @public
 *
 * Player 事件类型
 */
export declare type PlayerEventMap = {
    /** 帧加载完成触发 */
    frameloaded: {
        /** 是否成功加载 */
        isSuccess: boolean;
        /** 加载耗时 */
        time: number;
        /** 帧下标 */
        index: number;
        /** 已加载完成的帧数量 */
        current: number;
        /** 总共帧数量 */
        total: number;
        /** player */
        player: Player;
    };
    /** 全部帧加载完成 */
    loaded: {
        /** player */
        player: Player;
        /** 总共帧数量 */
        total: number;
    };
    /** 帧绘制完成后触发 */
    tick: {
        /** player */
        player: Player;
        /** 当前绘制的帧下标 */
        frame: number;
    };
    /** 播放时触发 */
    play: {
        /** player */
        player: Player;
    };
    /** 暂停时触发 */
    pause: {
        /** player */
        player: Player;
    };
};

export { }
